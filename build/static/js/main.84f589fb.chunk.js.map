{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Tasklist","props","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","getCookie","startEdit","deleteItem","strikeUnstrike","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","console","log","fetch","then","response","json","data","setState","e","target","value","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.84f589fb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass Tasklist extends React.Component {\n  // create the app here\n\n  // 1. constructor defining the MODEL we are manipulating\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [], // array to manage data\n      activeItem: {\n        // define item and fields here\n        id: null,\n        title: \"\",\n        completed: false,\n      },\n      editing: false, // will change if click on edit button\n    };\n    // binding features on your app - what can I do as a user?\n    this.fetchTasks = this.fetchTasks.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getCookie = this.getCookie.bind(this);\n    this.startEdit = this.startEdit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.strikeUnstrike = this.strikeUnstrike.bind(this);\n  }\n\n  // 2. Security : TOKEN FOR POST with cookie - downloaded on django website\n  getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      const cookies = document.cookie.split(\";\");\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        // Does this cookie string begin with the name we want?\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n\n  // manipulation starting\n\n  // 3. fetching all task from database\n  componentWillMount() {\n    // on page loading\n    this.fetchTasks();\n  }\n  fetchTasks() {\n    console.log(\"Fetching\");\n    // fetch with DRF correct url (as if you were going to DRF view)\n    fetch(\"http://127.0.0.1:8000/api/task-list\").then((response) =>\n      // response will be JSONed and will send \"data\"\n      response.json().then((data) =>\n        // setState will deal with data and display on the screen\n        // you could console.log(\"Data\", data)) to verify output (replace)\n        this.setState({ todoList: data })\n      )\n    );\n  }\n\n  // REAL-time update of the data input (check console) - it is just a display, no DB update at this stage\n  handleChange(e) {\n    var name = e.target.name; // fetch from html tagname below\n    var value = e.target.value; // fetch from html tagname below\n    console.log(\"Name\", name);\n    console.log(\"Value\", value);\n    this.setState({\n      activeItem: {\n        ...this.state.activeItem, // ... means we do reset current value to update instantly new one\n        title: value, // update value which will replace previous input (onevent)\n      },\n    });\n  }\n\n  // Update Database process with new input after clicking SUBMIT\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"Item\", this.state.activeItem); // display the object\n    var csrftoken = this.getCookie(\"csrftoken\");\n    var url = \"http://localhost:8000/api/task-create/\"; // DRF create URL\n\n    // check if this item exists in DB\n    if (this.state.editing === true) {\n      url = `http://localhost:8000/api/task-update/${this.state.activeItem.id}/`; // replace url = DRF update URL +id\n      this.setState({\n        editing: false, // we switch back to false\n      });\n    }\n\n    // process with the submit, url (edit or new), POST, headers with token, JSONed \"data\"\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify(this.state.activeItem),\n    })\n      // what's happening after?\n      .then((response) => {\n        this.fetchTasks(); // refresh page\n        // reset input\n        this.setState({\n          activeItem: {\n            id: null,\n            title: \"\",\n            completed: false,\n          },\n        });\n      })\n      // or error\n      .catch(function (error) {\n        console.log(\"ERROR\", error);\n      });\n  }\n\n  // edit button will call this function - input will change\n  startEdit(task) {\n    this.setState({\n      activeItem: task,\n      editing: true,\n    });\n  }\n\n  // delete button will trigger this\n  deleteItem(task) {\n    var csrftoken = this.getCookie(\"csrftoken\");\n\n    //process, url is unique, method is DELETE\n    fetch(`http://localhost:8000/api/task-delete/${task.id}/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n    })\n      //refresh page\n      .then((response) => {\n        this.fetchTasks();\n      });\n  }\n\n  // ADDED features\n  strikeUnstrike(task) {\n    task.completed = !task.completed; // change completed field to true\n    var csrftoken = this.getCookie(\"csrftoken\");\n    var url = `http://localhost:8000/api/task-update/${task.id}/`;\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"X-CSRFToken\": csrftoken,\n      },\n      body: JSON.stringify({ completed: task.completed, title: task.title }),\n    })\n      //refresh page\n      .then(() => {\n        this.fetchTasks();\n      });\n    //test if all good\n    console.log(\"TASK\", task.completed);\n  }\n\n  // RENDERING to template now\n  render() {\n    var tasks = this.state.todoList; // define array\n    var self = this; // self must be set in a var\n    return (\n      // general container\n      <div className=\"container\">\n        {/* task container holding the form and the list */}\n        <div id=\"task-container\">\n          <div id=\"form-wrapper\">\n            {/* upper part form with function on element */}\n            <form onSubmit={this.handleSubmit} id=\"form\">\n              {\" \"}\n              <div className=\"flex-wrapper\">\n                <div style={{ flex: 6 }}>\n                  <input\n                    onChange={this.handleChange}\n                    className=\"form-control\"\n                    id=\"title\"\n                    value={this.state.activeItem.title}\n                    type=\"text\"\n                    name=\"title\"\n                    placeholder=\"Add task..\"\n                  />\n                </div>\n\n                <div style={{ flex: 1 }}>\n                  <input\n                    id=\"submit\"\n                    className=\"btn btn-warning\"\n                    type=\"submit\"\n                    name=\"Add\"\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n          <div id=\"list-wrapper\">\n            {/* display all data using array.map */}\n            {tasks.map(function (task, index) {\n              return (\n                <div key={index} className=\"task-wrapper flex-wrapper\">\n                  <div\n                    onClick={() => self.strikeUnstrike(task)}\n                    style={{ flex: 7 }}\n                  >\n                    {/* if / else statement in elegant syntax */}\n                    {task.completed === false ? (\n                      <span>{task.title}</span>\n                    ) : (\n                      <strike>{task.title}</strike>\n                    )}\n                  </div>\n                  <div style={{ flex: 1 }}>\n                    <button\n                      onClick={() => self.startEdit(task)}\n                      className=\"btn btn-sm btn-outline-info\"\n                    >\n                      Edit\n                    </button>\n                  </div>\n                  <div style={{ flex: 1 }}>\n                    <button\n                      onClick={() => self.deleteItem(task)}\n                      className=\"btn btn-sm btn-outline-dark delete\"\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tasklist;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root2\")\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}